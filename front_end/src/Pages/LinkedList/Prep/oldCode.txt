import AlgoLingoBar from "../../Menu/AlgoLingoBar";
import LevelsBar from "../LevelBar";
import React, { useRef, useState, useEffect, forwardRef } from "react";
import Xarrow from "react-xarrows";
import "./LinkedListPrepLevel.css";

// Wrap Xarrow component with forwardRef
const ForwardedXarrow = forwardRef((props, ref) => (
  <Xarrow {...props} forwardRef={ref} />
));

function LinkedListPrepLevel() {
  const [numberOfBoxes, setNumberOfBoxes] = useState(1);
  const [boxReferences, setBoxReferences] = useState([
    { id: `box-0`, value: Math.floor(Math.random() * 100) },
  ]);

  useEffect(() => {
    setBoxReferences(
      Array.from({ length: numberOfBoxes }, (_, index) => ({
        id: `box-${index}`,
        value: boxReferences[index]?.value ?? Math.floor(Math.random() * 100),
      }))
    );
  }, [numberOfBoxes]);

  const handlePushToHead = () => {
    if (numberOfBoxes < 5) {
      const newValue = Math.floor(Math.random() * 100);
      setNumberOfBoxes((prevNumberOfBoxes) => prevNumberOfBoxes + 1);
      setBoxReferences((prevBoxReferences) => [
        { id: `box-0`, value: newValue },
        ...prevBoxReferences.map((box, index) => ({
          ...box,
          id: `box-${index + 1}`,
        })),
      ]);
    } else {
      alert("5 Nodes is the limit");
    }
  };

  const handlePushToTail = () => {
    if (numberOfBoxes < 5) {
      const newValue = Math.floor(Math.random() * 100);
      setNumberOfBoxes((prevNumberOfBoxes) => prevNumberOfBoxes + 1);
      setBoxReferences((prevBoxReferences) => [
        ...prevBoxReferences,
        { id: `box-${numberOfBoxes}`, value: newValue },
      ]);
    } else {
      alert("5 Nodes is the limit");
    }
  };

  const handleDeleteTail = () => {
    if (numberOfBoxes > 0) {
      setNumberOfBoxes((prevNumberOfBoxes) => prevNumberOfBoxes - 1);
      setBoxReferences((prevBoxReferences) => prevBoxReferences.slice(0, -1));
    } else {
      alert("Add nodes to delete");
    }
  };

  const renderBoxesAndArrows = () => {
    return boxReferences.map((box, index) => (
      <div
        key={box.id}
        id={box.id}
        className={`box-style ${index === numberOfBoxes - 1 ? "animate" : ""}`}
      >
        <p>{box.value}</p>
        {index < boxReferences.length - 1 && (
          <ForwardedXarrow
            key={`arrow-${index}`}
            start={box.id}
            end={boxReferences[index + 1].id}
            lineColor="blue"
            startAnchor="right"
            endAnchor="left"
          />
        )}
        <div className="line-style" />
      </div>
    ));
  };

  return (
    <div>
      <div className="all-div">
        <AlgoLingoBar />
        <div className="other">
          <h1 className="title-styling">Linked List</h1>
          <h2 className="title-styling">Preparation</h2>
          <div className="navbar-line" />
          <LevelsBar />
          <div>
            <button onClick={handlePushToHead} className="push-buttons-styling">
              Push to Head
            </button>
            <button className="push-buttons-styling">Push after a value</button>
            <button onClick={handlePushToTail} className="push-buttons-styling">
              Push to Tail
            </button>
          </div>
          <div>
            <button className="push-buttons-styling">Delete Head</button>
            <button className="push-buttons-styling">
              Delete after a value
            </button>
            <button className="push-buttons-styling" onClick={handleDeleteTail}>
              Delete Tail
            </button>
          </div>
          <p>Number Of Nodes: {numberOfBoxes}</p>
          <div className="game-container">{renderBoxesAndArrows()}</div>
        </div>
      </div>
    </div>
  );
}

export default LinkedListPrepLevel;


.title-styling {
  text-align: center;
  color: #f9f9f9;
  font-family: din-round, sans-serif;
}

.all-div {
  flex: 1;
  display: flex;
}

.other {
  padding-left: 3%;
  width: 100%;
}

.navbar-line {
  width: 100%;
  background-color: black;
  height: 5px;
}

.game-container {
  padding-top: 10%;
  display: flex;
  justify-content: center;
  position: relative;
}
.box-style {
  position: relative;
  border: red solid 2px;
  border-radius: 10px;
  padding: 5px;
  width: 12%;
  height: 80px;
  display: inline-block;
  box-sizing: border-box;
  margin-right: 8%;
  opacity: 0; /* Initially set opacity to 0 */
  animation: fadeIn 1.5s forwards; /* Apply fadeIn animation */
}
@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
.line-style::before {
  content: "";
  position: absolute;
  width: 2px;
  height: 100%;
  background-color: blue;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
.fade-in {
  opacity: 0;
  transition: opacity 1s ease; /* Adjust duration and timing function as needed */
}

.fade-in.animate {
  opacity: 1;
}
.push-buttons-styling {
  appearance: button;
  background-color: #294050;
  border: solid transparent;
  border-radius: 16px;
  border-width: 0 0 4px;
  box-sizing: border-box;
  color: #f9f9f9;
  cursor: pointer;
  display: inline-block;
  font-family: din-round, sans-serif;
  font-size: 15px;
  font-weight: 700;
  letter-spacing: 0.8px;
  line-height: 20px;
  margin: 0 5px; /* Add margin here to create space between buttons */
  outline: none;
  overflow: visible;
  padding: 13px 16px;
  text-align: center;
  text-transform: uppercase;
  touch-action: manipulation;
  transform: translateZ(0);
  transition: filter 0.2s;
  user-select: none;
  -webkit-user-select: none;
  vertical-align: middle;
  white-space: nowrap;
  width: 20%;
}

.push-buttons-styling:after {
  background-clip: padding-box;
  background-color: #3498db;
  border: solid transparent;
  border-radius: 16px;
  border-width: 0 0 4px;
  bottom: -4px;
  content: "";
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.push-buttons-styling:main,
.push-buttons-styling:focus {
  user-select: auto;
}

.push-buttons-styling:hover:not(:disabled) {
  filter: brightness(1.1);
  -webkit-filter: brightness(1.1);
}

.push-buttons-styling:disabled {
  cursor: auto;
}

.push-buttons-styling:active {
  border-width: 4px 0 0;
  background: none;
}

