import React, { useState, useEffect } from "react";
import "./FirstLevel.css";
import StackImplementation from "./StackImplementation"; // Import the StackImplementation class

function FirstLevel() {
  const [activeButtonIndex, setActiveButtonIndex] = useState(null);
  const [stack, setStack] = useState(new StackImplementation()); // Initialize stack using StackImplementation
  const [poppedValues, setPoppedValues] = useState([]);
  const [questionText, setQuestionText] = useState(""); // State to hold question text
  const [operations, setOperations] = useState([]); // State to hold the generated operations
  const [userAnswer, setUserAnswer] = useState(""); // State to hold user's answer
  const [checkResult, setCheckResult] = useState(""); // State to hold check result

  // Function to generate random values for the stack bar and set question text
  const generateRandomValues = () => {
    const numberOfFieldsDynamic = Math.floor(Math.random() * 9) + 1; // Random number between 1 and 9
    const newStackValues = Array.from(
      { length: numberOfFieldsDynamic },
      (_, i) => Math.floor(Math.random() * 100)
    ); // Generate random values

    const newOperations = [];

    // Push up to four random values onto the stack
    const numberOfValuesToPush = Math.min(
      Math.floor(Math.random() * 4) + 1,
      newStackValues.length
    );
    const valuesToPush = newStackValues.slice(0, numberOfValuesToPush);

    // Push each value onto the stack
    valuesToPush.forEach((value) => {
      stack.push(value);
      newOperations.push({ type: "push", values: [value] });
    });

    // Generate a random pop operation
    const popCount =
      Math.floor(Math.random() * Math.min(valuesToPush.length, 3)) + 1;
    newOperations.push({ type: "pop", count: popCount });

    setQuestionText(generateQuestion(valuesToPush, popCount));
    setOperations(newOperations);
  };

  // Function to generate a random question
  const generateQuestion = (stackValues, popCount) => {
    const questionArray = [];

    // Push operation for the first sentence
    questionArray.push(`Push ${stackValues.join(", ")}`);

    // Pop operation for the second sentence
    questionArray.push(`Pop ${popCount} values`);

    // Combine the questions
    const question = questionArray.join(" AND ");

    return question;
  };

  useEffect(() => {
    generateRandomValues();
  }, []);

  // Function to handle clicking on a button
  const handleButtonClick = (index) => {
    setActiveButtonIndex(index);
  };

  // Function to render buttons
  const renderButtons = () => {
    return [1, 2, 3, 4, 5].map((number, index) => (
      <button
        key={index}
        className="button"
        style={{ backgroundColor: getButtonColor(index) }}
        onClick={() => handleButtonClick(index)}
      >
        {number}
      </button>
    ));
  };

  // Function to determine button color based on active state
  const getButtonColor = (index) => {
    return index === activeButtonIndex ? "#e74c3c" : "#3498db";
  };

  // Log the generated stack and the stack after the operation is applied to the console
  useEffect(() => {
    console.log(applyOperationAndGetStack(stack.stack));
  }, [operations]); // Only trigger the effect when the 'operations' state changes

  const applyOperationAndGetStack = (currentStack) => {
    let newStack = new StackImplementation(); // Create a new stack instance

    // Copy the current stack elements to the new stack
    currentStack.forEach((value) => {
      newStack.push(value);
    });

    let newPoppedValues = []; // Initialize an empty array for new popped values

    // Apply the operations
    operations.forEach((operation) => {
      if (operation.type === "pop") {
        for (let i = 0; i < operation.count; i++) {
          if (!newStack.isEmpty()) {
            // Remove the last value from the stack and add it to the poppedValues array
            newPoppedValues.push(newStack.pop());
          }
        }
      } else if (operation.type === "push") {
        operation.values.forEach((value) => {
          newStack.push(value);
        });
      }
    });

    // Update the stack state with the new stack instance
    setStack(newStack);

    // Update the poppedValues state with the newPoppedValues array
    setPoppedValues(newPoppedValues);

    // Return the new stack after applying the operations
    return newStack.stack;
  };

  // Function to handle clicking the "Check" button
  // Function to handle clicking the "Check" button
  const handleCheck = () => {
    // Convert the user's answer to a number
    const userAnswerNum = parseInt(userAnswer);

    // Get the last popped value from the poppedValues array
    const lastPoppedValue = poppedValues[poppedValues.length - 1];

    // Check if the user's answer matches the last popped value
    if (userAnswerNum === lastPoppedValue) {
      // If correct, set check result to "Great!"
      setCheckResult("Great!");
    } else {
      // If incorrect, set check result to "Failed"
      setCheckResult("Failed");
    }
  };

  return (
    <div>
      <h1 className="title-styling">Stack</h1>
      <h2>Levels</h2>
      {/* Levels bar*/}
      <div className="button-bar">{renderButtons()}</div>

      {/* Existing stack bar */}
      {/* Existing stack bar */}
      <h2>Stack Bar:</h2>
      <div className="stack-bar">
        {/* Render popped values first */}
        {poppedValues.map((value, index) => (
          <div key={`popped-${index}`} className="stack-field popped">
            {value}
          </div>
        ))}
        {/* Render stack values */}
        {[...stack.stack].reverse().map((value, index) => (
          <div key={index} className="stack-field">
            {value}
          </div>
        ))}
      </div>

      {/* The Question */}
      <h2>What will be the last popped value after</h2>
      <div>
        <p>{questionText}</p>
        <h3>What will be the last popped value?</h3>
        <input
          type="number"
          placeholder="Enter your answer"
          min="0"
          step="1"
          value={userAnswer}
          onChange={(e) => setUserAnswer(e.target.value)}
        />
        <button className="check-button" onClick={handleCheck}>
          Check
        </button>
        {/* Display check result */}
        {checkResult && <p>{checkResult}</p>}
      </div>
    </div>
  );
}

export default FirstLevel;
